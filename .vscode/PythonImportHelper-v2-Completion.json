[
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "condition",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "If",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "condition",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "partial_transformer",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "If",
        "importPath": "gloe",
        "description": "gloe",
        "isExtraImport": true,
        "detail": "gloe",
        "documentation": {}
    },
    {
        "label": "check_if_image_has_container_running",
        "importPath": "pipelines.utils.docker.utilities",
        "description": "pipelines.utils.docker.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "check_if_image_has_container_running",
        "importPath": "pipelines.utils.docker.utilities",
        "description": "pipelines.utils.docker.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "debug",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "forward_incoming",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "debug",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "debug",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "forward_incoming",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "debug",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "gloe.utils",
        "description": "gloe.utils",
        "isExtraImport": true,
        "detail": "gloe.utils",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "MinioException",
        "importPath": "minio.error",
        "description": "minio.error",
        "isExtraImport": true,
        "detail": "minio.error",
        "documentation": {}
    },
    {
        "label": "MinioException",
        "importPath": "minio.error",
        "description": "minio.error",
        "isExtraImport": true,
        "detail": "minio.error",
        "documentation": {}
    },
    {
        "label": "MinioException",
        "importPath": "minio.error",
        "description": "minio.error",
        "isExtraImport": true,
        "detail": "minio.error",
        "documentation": {}
    },
    {
        "label": "MinioException",
        "importPath": "minio.error",
        "description": "minio.error",
        "isExtraImport": true,
        "detail": "minio.error",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "isExtraImport": true,
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "delete_files_on_folder",
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "isExtraImport": true,
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "isExtraImport": true,
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "delete_files_on_folder",
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "isExtraImport": true,
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "BaseExceptionTransformers",
        "importPath": "pipelines.transformers.exceptions.base",
        "description": "pipelines.transformers.exceptions.base",
        "isExtraImport": true,
        "detail": "pipelines.transformers.exceptions.base",
        "documentation": {}
    },
    {
        "label": "BaseExceptionTransformers",
        "importPath": "pipelines.transformers.exceptions.base",
        "description": "pipelines.transformers.exceptions.base",
        "isExtraImport": true,
        "detail": "pipelines.transformers.exceptions.base",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "isExtraImport": true,
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "isExtraImport": true,
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "dumps",
        "importPath": "orjson",
        "description": "orjson",
        "isExtraImport": true,
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "OPT_INDENT_2",
        "importPath": "orjson",
        "description": "orjson",
        "isExtraImport": true,
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "dumps",
        "importPath": "orjson",
        "description": "orjson",
        "isExtraImport": true,
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "OPT_INDENT_2",
        "importPath": "orjson",
        "description": "orjson",
        "isExtraImport": true,
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "FileUploadException",
        "importPath": "pipelines.utils.minio.exceptions.file_upload_exception",
        "description": "pipelines.utils.minio.exceptions.file_upload_exception",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.exceptions.file_upload_exception",
        "documentation": {}
    },
    {
        "label": "FileUploadException",
        "importPath": "pipelines.utils.minio.exceptions.file_upload_exception",
        "description": "pipelines.utils.minio.exceptions.file_upload_exception",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.exceptions.file_upload_exception",
        "documentation": {}
    },
    {
        "label": "create_sagemaker_temp_files",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "check_if_metadata_is_available",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "create_sagemaker_temp_files",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "check_if_metadata_is_available",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "isExtraImport": true,
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "DockerClientServer",
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "isExtraImport": true,
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "DockerClientServer",
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "isExtraImport": true,
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "images_tags_has_some_running_container",
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "isExtraImport": true,
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "isExtraImport": true,
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "up_compose_files",
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "isExtraImport": true,
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "images_tags_has_some_running_container",
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "isExtraImport": true,
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "isExtraImport": true,
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "MinioClientServer",
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "MinioClientServer",
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "isExtraImport": true,
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "Cluster",
        "importPath": "diagrams",
        "description": "diagrams",
        "isExtraImport": true,
        "detail": "diagrams",
        "documentation": {}
    },
    {
        "label": "Diagram",
        "importPath": "diagrams",
        "description": "diagrams",
        "isExtraImport": true,
        "detail": "diagrams",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "diagrams",
        "description": "diagrams",
        "isExtraImport": true,
        "detail": "diagrams",
        "documentation": {}
    },
    {
        "label": "Robomaker",
        "importPath": "diagrams.aws.robotics",
        "description": "diagrams.aws.robotics",
        "isExtraImport": true,
        "detail": "diagrams.aws.robotics",
        "documentation": {}
    },
    {
        "label": "Sagemaker",
        "importPath": "diagrams.aws.ml",
        "description": "diagrams.aws.ml",
        "isExtraImport": true,
        "detail": "diagrams.aws.ml",
        "documentation": {}
    },
    {
        "label": "Custom",
        "importPath": "diagrams.custom",
        "description": "diagrams.custom",
        "isExtraImport": true,
        "detail": "diagrams.custom",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "diagrams.onprem.client",
        "description": "diagrams.onprem.client",
        "isExtraImport": true,
        "detail": "diagrams.onprem.client",
        "documentation": {}
    },
    {
        "label": "Python",
        "importPath": "diagrams.programming.language",
        "description": "diagrams.programming.language",
        "isExtraImport": true,
        "detail": "diagrams.programming.language",
        "documentation": {}
    },
    {
        "label": "Docker",
        "importPath": "diagrams.onprem.container",
        "description": "diagrams.onprem.container",
        "isExtraImport": true,
        "detail": "diagrams.onprem.container",
        "documentation": {}
    },
    {
        "label": "DockerImages",
        "importPath": "pipelines.types_built.docker",
        "description": "pipelines.types_built.docker",
        "isExtraImport": true,
        "detail": "pipelines.types_built.docker",
        "documentation": {}
    },
    {
        "label": "DockerImages",
        "importPath": "pipelines.types_built.docker",
        "description": "pipelines.types_built.docker",
        "isExtraImport": true,
        "detail": "pipelines.types_built.docker",
        "documentation": {}
    },
    {
        "label": "DockerComposeCommands",
        "importPath": "pipelines.utils.commands.docker_compose",
        "description": "pipelines.utils.commands.docker_compose",
        "isExtraImport": true,
        "detail": "pipelines.utils.commands.docker_compose",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "build.lib.pipelines.helpers.files_manager",
        "description": "build.lib.pipelines.helpers.files_manager",
        "peekOfCode": "def create_folder(folder_name: str, mode: int = None):\n    try:\n        if not os.path.exists(folder_name):\n            os.makedirs(folder_name) if mode is None else os.makedirs(folder_name, mode=mode)\n    except PermissionError:\n        raise PermissionError(f'You don\\'t have permission to create folder {folder_name} with permission {mode}')\n    except Exception as e:\n        raise e\ndef delete_files_on_folder(folder_name: str):\n    try:",
        "detail": "build.lib.pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "delete_files_on_folder",
        "kind": 2,
        "importPath": "build.lib.pipelines.helpers.files_manager",
        "description": "build.lib.pipelines.helpers.files_manager",
        "peekOfCode": "def delete_files_on_folder(folder_name: str):\n    try:\n        if os.path.exists(folder_name):\n            files = glob(f'{folder_name}/*')\n            [os.remove(file) for file in files]\n    except PermissionError:\n        raise PermissionError(f'You don\\'t have permission to delete folder {folder_name}')\n    except Exception as e:\n        raise e",
        "detail": "build.lib.pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "BaseExceptionTransformers",
        "kind": 6,
        "importPath": "build.lib.pipelines.transformers.exceptions.base",
        "description": "build.lib.pipelines.transformers.exceptions.base",
        "peekOfCode": "class BaseExceptionTransformers(Exception):\n    def __init__(self, msg: str = None, exception: Exception = None):\n        self.exception = exception\n        self.msg = msg\n    def __str__(self):\n        return f'{self.msg}, {self.exception}'",
        "detail": "build.lib.pipelines.transformers.exceptions.base",
        "documentation": {}
    },
    {
        "label": "image_tag_has_running_container",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "def image_tag_has_running_container(_, docker_client: DockerClient, image_tag: str) -> bool:\n    is_running = check_if_image_has_container_running(docker_client, image_tag)\n    return is_running\n@partial_transformer\ndef images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer\ndef images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "images_tags_has_some_running_container",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "def images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer\ndef images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return all(is_running_containers)\n@partial_transformer\ndef echo(_, message: str):\n    print(message)",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "images_tags_has_running_container",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "def images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return all(is_running_containers)\n@partial_transformer\ndef echo(_, message: str):\n    print(message)\n@condition\ndef forward_condition(_condition: bool):\n    return _condition",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "echo",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "def echo(_, message: str):\n    print(message)\n@condition\ndef forward_condition(_condition: bool):\n    return _condition",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "forward_condition",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "def forward_condition(_condition: bool):\n    return _condition",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "ImageTag",
        "kind": 5,
        "importPath": "build.lib.pipelines.transformers.general",
        "description": "build.lib.pipelines.transformers.general",
        "peekOfCode": "ImageTag = str\n@partial_transformer\ndef image_tag_has_running_container(_, docker_client: DockerClient, image_tag: str) -> bool:\n    is_running = check_if_image_has_container_running(docker_client, image_tag)\n    return is_running\n@partial_transformer\ndef images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer",
        "detail": "build.lib.pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "side_effect",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.helpers",
        "description": "build.lib.pipelines.transformers.helpers",
        "peekOfCode": "def side_effect(_transformer: Transformer[_In, Any]) -> Transformer[_In, _In]:\n    \"\"\"\n    This transformer just executes another one but does not pass\n     anything to the next transformer on pipeline execution\n    \"\"\"\n    @transformer\n    def _pick_income(income: tuple[Any, _In]) -> _In:\n        return income[1]\n    return forward_incoming(_transformer) >> _pick_income",
        "detail": "build.lib.pipelines.transformers.helpers",
        "documentation": {}
    },
    {
        "label": "_In",
        "kind": 5,
        "importPath": "build.lib.pipelines.transformers.helpers",
        "description": "build.lib.pipelines.transformers.helpers",
        "peekOfCode": "_In = TypeVar('_In')\n# side_effect\ndef side_effect(_transformer: Transformer[_In, Any]) -> Transformer[_In, _In]:\n    \"\"\"\n    This transformer just executes another one but does not pass\n     anything to the next transformer on pipeline execution\n    \"\"\"\n    @transformer\n    def _pick_income(income: tuple[Any, _In]) -> _In:\n        return income[1]",
        "detail": "build.lib.pipelines.transformers.helpers",
        "documentation": {}
    },
    {
        "label": "create_sagemaker_temp_files",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "def create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)\n@transformer\ndef check_if_metadata_is_available(_) -> None:\n    try:",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "check_if_metadata_is_available",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "def check_if_metadata_is_available(_) -> None:\n    try:\n        create_folder(work_directory)\n        delete_files_on_folder(work_directory)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to check if the metadata is available\", e)\n@partial_transformer\ndef upload_hyperparameters(_, minio_client: MinioClient, hyperparameters: HyperParameters):",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "def upload_hyperparameters(_, minio_client: MinioClient, hyperparameters: HyperParameters):\n    try:\n        _upload_hyperparameters(minio_client, hyperparameters)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the hyperparameters\", e)\n@partial_transformer\ndef upload_metadata(_, minio_client: MinioClient, model_metadata: ModelMetadata):\n    try:",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "def upload_metadata(_, minio_client: MinioClient, model_metadata: ModelMetadata):\n    try:\n        _upload_metadata(minio_client, model_metadata)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the model metadata\", e)\n@partial_transformer\ndef upload_reward_function(_, minio_client: MinioClient, reward_function_buffer: BytesIO):\n    try:",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "kind": 2,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "def upload_reward_function(_, minio_client: MinioClient, reward_function_buffer: BytesIO):\n    try:\n        _upload_reward_function(minio_client, reward_function_buffer)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the reward function\", e)",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "sagemaker_temp_dir",
        "kind": 5,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "sagemaker_temp_dir = '/tmp/sagemaker'\nwork_directory = '/tmp/teste'\n@transformer\ndef create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "work_directory",
        "kind": 5,
        "importPath": "build.lib.pipelines.transformers.training",
        "description": "build.lib.pipelines.transformers.training",
        "peekOfCode": "work_directory = '/tmp/teste'\n@transformer\ndef create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)\n@transformer",
        "detail": "build.lib.pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "ExplorationType",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.hyperparameters",
        "description": "build.lib.pipelines.types_built.hyperparameters",
        "peekOfCode": "class ExplorationType(Enum):\n    \"\"\"\n    Exploration strategies used in training algorithms.\n    - `CATEGORICAL`: Used for clipped_ppo training algorithm.\n    - `ADDITIVE_NOISE`: Used for sac training algorithm.\n    \"\"\"\n    CATEGORICAL = 'categorical'\n    ADDITIVE_NOISE = 'additive_noise'\nclass LossType(Enum):\n    \"\"\"",
        "detail": "build.lib.pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "LossType",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.hyperparameters",
        "description": "build.lib.pipelines.types_built.hyperparameters",
        "peekOfCode": "class LossType(Enum):\n    \"\"\"\n    Types of loss techniques used to minimize error.\n    - `MSE`: Mean Squared Error loss.\n    - `HUBER`: Huber loss.\n    \"\"\"\n    MSE = 'mean squared error'\n    HUBER = 'huber'\n@dataclass\nclass HyperParameters:",
        "detail": "build.lib.pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.hyperparameters",
        "description": "build.lib.pipelines.types_built.hyperparameters",
        "peekOfCode": "class HyperParameters:\n    \"\"\"\n    Hyperparameters structure for DeepRacer with default values from documentation.\n    Attributes:\n    - `batch_size`: Batch size used in training (default: 64).\n    - `beta_entropy`: Beta value for entropy regularization (default: 0.01).\n    - `discount_factor`: Discount factor for future rewards (default: 0.999).\n    - `e_greedy_value`: Epsilon greedy value for exploration (default: 0.05).\n    - `epsilon_steps`: Number of steps for epsilon decay (default: 10000).\n    - `exploration_type`: Type of exploration strategy (default: `CATEGORICAL`).",
        "detail": "build.lib.pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "ActionSpaceType",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class ActionSpaceType(Enum):\n    \"\"\"Type of action space that will be used by the model.\n    - `CONTINUOUS`: Represents continuous values on the action space, which are specified by a range.\n    - `DISCRETE`: Represents discrete values on the action space, which represent specific points.\n    \"\"\"\n    CONTINUOUS = 'continuous'\n    DISCRETE = 'discrete'\nclass NeuralNetwork(Enum):\n    \"\"\"Type of Neural Network used for training the algorithm.\n    - `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`: This network has no fully connected layer; the input embedder nodes",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "NeuralNetwork",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class NeuralNetwork(Enum):\n    \"\"\"Type of Neural Network used for training the algorithm.\n    - `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`: This network has no fully connected layer; the input embedder nodes\n      connect directly to the action nodes.\n    - `DEEP_CONVOLUTIONAL_NETWORK`: This network includes a single fully connected layer of 64 nodes.\n    - `DEEP_CONVOLUTIONAL_NETWORK_DEEP`: This network includes two fully connected layers of 512 nodes each.\n    \"\"\"\n    DEEP_CONVOLUTIONAL_NETWORK_SHALLOW = 'DEEP_CONVOLUTIONAL_NETWORK_SHALLOW'\n    DEEP_CONVOLUTIONAL_NETWORK = 'DEEP_CONVOLUTIONAL_NETWORK'\n    DEEP_CONVOLUTIONAL_NETWORK_DEEP = 'DEEP_CONVOLUTIONAL_NETWORK_DEEP'",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "TrainingAlgorithm",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class TrainingAlgorithm(Enum):\n    \"\"\"Training algorithms for the model.\n    - `SAC`: Stochastic Actor-Critic.\n    - `PPO`: Proximal Policy Optimization.\n    \"\"\"\n    SAC = 'sac'\n    PPO = 'ppo'\nclass Sensor(Enum):\n    \"\"\"Types of sensors used in the model.\n    - `FRONT_FACING_CAMERA`: Front-facing camera sensor.",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "Sensor",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class Sensor(Enum):\n    \"\"\"Types of sensors used in the model.\n    - `FRONT_FACING_CAMERA`: Front-facing camera sensor.\n    - `STEREO_CAMERAS`: Stereo camera sensors.\n    - `LIDAR`: Light Detection and Ranging sensor.\n    \"\"\"\n    FRONT_FACING_CAMERA = 'FRONT_FACING_CAMERA'\n    STEREO_CAMERAS = 'STEREO_CAMERAS'\n    LIDAR = 'LIDAR'\n@dataclass",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "SteeringAngle",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class SteeringAngle:\n    \"\"\"Represents the range of steering angles.\"\"\"\n    high: float\n    low: float\n@dataclass\nclass Speed:\n    \"\"\"Represents the range of speeds.\"\"\"\n    high: float\n    low: float\n@dataclass",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "Speed",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class Speed:\n    \"\"\"Represents the range of speeds.\"\"\"\n    high: float\n    low: float\n@dataclass\nclass ContinuousActionSpace:\n    \"\"\"Defines the continuous action space.\n    Attributes:\n    - `steering_angle`: Range of steering angles.\n    - `speed`: Range of speeds.",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ContinuousActionSpace",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class ContinuousActionSpace:\n    \"\"\"Defines the continuous action space.\n    Attributes:\n    - `steering_angle`: Range of steering angles.\n    - `speed`: Range of speeds.\n    \"\"\"\n    steering_angle: SteeringAngle\n    speed: Speed\nclass DiscreteActionSpace(Enum):\n    \"\"\"Defines the discrete action space.\"\"\"",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "DiscreteActionSpace",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class DiscreteActionSpace(Enum):\n    \"\"\"Defines the discrete action space.\"\"\"\n    steering_angle = -30.0\n    speed = 0.6\n@dataclass\nclass ModelMetadata:\n    \"\"\"Metadata for the model.\n    Attributes:\n    - `action_space_type`: Type of action space used by the model (default: `CONTINUOUS`).\n    - `action_space`: Action space configuration (default: continuous action space).",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "kind": 6,
        "importPath": "build.lib.pipelines.types_built.model_metadata",
        "description": "build.lib.pipelines.types_built.model_metadata",
        "peekOfCode": "class ModelMetadata:\n    \"\"\"Metadata for the model.\n    Attributes:\n    - `action_space_type`: Type of action space used by the model (default: `CONTINUOUS`).\n    - `action_space`: Action space configuration (default: continuous action space).\n    - `version`: Version of the model (default: 5).\n    - `training_algorithm`: Training algorithm used (default: `PPO`).\n    - `neural_network`: Type of neural network used for training (default: `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`).\n    - `sensor`: List of sensors used by the model (default: `[FRONT_FACING_CAMERA]`).\n    \"\"\"",
        "detail": "build.lib.pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "DockerClientServer",
        "kind": 6,
        "importPath": "build.lib.pipelines.utils.docker.server",
        "description": "build.lib.pipelines.utils.docker.server",
        "peekOfCode": "class DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = APIClient(base_url, use_ssh_client=True)\n            return cls._instance",
        "detail": "build.lib.pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "local_docker_daemon",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.docker.server",
        "description": "build.lib.pipelines.utils.docker.server",
        "peekOfCode": "local_docker_daemon = os.getenv('LOCAL_SERVER_DOCKER_DAEMON')\nremote_docker_daemon = os.getenv(\"REMOTE_SERVER_DOCKER_DAEMON\")\nbase_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:",
        "detail": "build.lib.pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "remote_docker_daemon",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.docker.server",
        "description": "build.lib.pipelines.utils.docker.server",
        "peekOfCode": "remote_docker_daemon = os.getenv(\"REMOTE_SERVER_DOCKER_DAEMON\")\nbase_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:",
        "detail": "build.lib.pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.docker.server",
        "description": "build.lib.pipelines.utils.docker.server",
        "peekOfCode": "base_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = APIClient(base_url, use_ssh_client=True)",
        "detail": "build.lib.pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "check_if_image_has_container_running",
        "kind": 2,
        "importPath": "build.lib.pipelines.utils.docker.utilities",
        "description": "build.lib.pipelines.utils.docker.utilities",
        "peekOfCode": "def check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True\n    return False\ndef _find_image_id_by_name(docker_client: DockerClient, image_tag: str) -> str:",
        "detail": "build.lib.pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "ImageId",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.docker.utilities",
        "description": "build.lib.pipelines.utils.docker.utilities",
        "peekOfCode": "ImageId = str\nImageName = str\ndef check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True",
        "detail": "build.lib.pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "ImageName",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.docker.utilities",
        "description": "build.lib.pipelines.utils.docker.utilities",
        "peekOfCode": "ImageName = str\ndef check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True\n    return False",
        "detail": "build.lib.pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "FileUploadException",
        "kind": 6,
        "importPath": "build.lib.pipelines.utils.minio.exceptions.file_upload_exception",
        "description": "build.lib.pipelines.utils.minio.exceptions.file_upload_exception",
        "peekOfCode": "class FileUploadException(Exception):\n    \"\"\"Exception raised for errors related to files uploads.\"\"\"\n    def __init__(self, message=\"Error uploading file.\", original_exception=None):\n        \"\"\"\n        Initialize a FileException.\n        Args:\n            message (str): Explanation of the error.\n            original_exception (Exception): The original exception that caused this exception.\n        \"\"\"\n        self.message = message",
        "detail": "build.lib.pipelines.utils.minio.exceptions.file_upload_exception",
        "documentation": {}
    },
    {
        "label": "MinioClientServer",
        "kind": 6,
        "importPath": "build.lib.pipelines.utils.minio.server",
        "description": "build.lib.pipelines.utils.minio.server",
        "peekOfCode": "class MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = MinioClient(endpoint, access_key, secret_key, secure=False)\n            return cls._instance",
        "detail": "build.lib.pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "access_key",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.server",
        "description": "build.lib.pipelines.utils.minio.server",
        "peekOfCode": "access_key = os.getenv('ACCESS_KEY')\nsecret_key = os.getenv('SECRET_KEY')\nendpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:",
        "detail": "build.lib.pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "secret_key",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.server",
        "description": "build.lib.pipelines.utils.minio.server",
        "peekOfCode": "secret_key = os.getenv('SECRET_KEY')\nendpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:",
        "detail": "build.lib.pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.server",
        "description": "build.lib.pipelines.utils.minio.server",
        "peekOfCode": "endpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = MinioClient(endpoint, access_key, secret_key, secure=False)",
        "detail": "build.lib.pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "kind": 2,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        hyperparameters (HyperParameters): The hyperparameters to minio.\n    Returns:",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "kind": 2,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_reward_function(\n    minio_client: MinioClient,\n    reward_function_buffer: io.BytesIO\n):\n    try:\n        buffer_size = reward_function_buffer.getbuffer().nbytes\n        object_name = 'reward_function.py'\n        result = minio_client.put_object(\n            _bucket_name,\n            f'{_custom_files_folder}/{object_name}',",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "kind": 2,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_metadata(\n    minio_client: MinioClient,\n    model_metadata: ModelMetadata\n):\n    \"\"\"\n    Uploads metadata to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        model_metadata (Model Metadata): The metadata to minio.\n    Returns:",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_bucket_name",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "_bucket_name = os.getenv('BUCKET_NAME')\n_custom_files_folder = os.getenv('CUSTOM_FILES_FOLDER_PATH')\n_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_custom_files_folder",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "_custom_files_folder = os.getenv('CUSTOM_FILES_FOLDER_PATH')\n_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_reward_function_path",
        "kind": 5,
        "importPath": "build.lib.pipelines.utils.minio.utilities",
        "description": "build.lib.pipelines.utils.minio.utilities",
        "peekOfCode": "_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        hyperparameters (HyperParameters): The hyperparameters to minio.",
        "detail": "build.lib.pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "train_pipeline",
        "kind": 2,
        "importPath": "build.lib.pipelines.training_pipeline",
        "description": "build.lib.pipelines.training_pipeline",
        "peekOfCode": "def train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(\n            forward[None]() >> (\n                (",
        "detail": "build.lib.pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "_docker_client",
        "kind": 5,
        "importPath": "build.lib.pipelines.training_pipeline",
        "description": "build.lib.pipelines.training_pipeline",
        "peekOfCode": "_docker_client = DockerClientServer.get_instance()\n_minio_client = MinioClientServer.get_instance()\nsagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition",
        "detail": "build.lib.pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "_minio_client",
        "kind": 5,
        "importPath": "build.lib.pipelines.training_pipeline",
        "description": "build.lib.pipelines.training_pipeline",
        "peekOfCode": "_minio_client = MinioClientServer.get_instance()\nsagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))",
        "detail": "build.lib.pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "sagemaker_tag",
        "kind": 5,
        "importPath": "build.lib.pipelines.training_pipeline",
        "description": "build.lib.pipelines.training_pipeline",
        "peekOfCode": "sagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(",
        "detail": "build.lib.pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "robomaker_tag",
        "kind": 5,
        "importPath": "build.lib.pipelines.training_pipeline",
        "description": "build.lib.pipelines.training_pipeline",
        "peekOfCode": "robomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(\n            forward[None]() >> (",
        "detail": "build.lib.pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "train_time",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "train_time = datetime.now().strftime('%Y%m%d%H%M%S')\nconfig = {}\nconfig['AWS_REGION'] = os.environ.get('DR_AWS_APP_REGION', 'us-east-1')\nconfig['JOB_TYPE'] = 'TRAINING'\nconfig['KINESIS_VIDEO_STREAM_NAME'] = os.environ.get('DR_KINESIS_STREAM_NAME', '')\nconfig['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config = {}\nconfig['AWS_REGION'] = os.environ.get('DR_AWS_APP_REGION', 'us-east-1')\nconfig['JOB_TYPE'] = 'TRAINING'\nconfig['KINESIS_VIDEO_STREAM_NAME'] = os.environ.get('DR_KINESIS_STREAM_NAME', '')\nconfig['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['AWS_REGION']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['AWS_REGION'] = os.environ.get('DR_AWS_APP_REGION', 'us-east-1')\nconfig['JOB_TYPE'] = 'TRAINING'\nconfig['KINESIS_VIDEO_STREAM_NAME'] = os.environ.get('DR_KINESIS_STREAM_NAME', '')\nconfig['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)\nconfig['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') ",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['JOB_TYPE']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['JOB_TYPE'] = 'TRAINING'\nconfig['KINESIS_VIDEO_STREAM_NAME'] = os.environ.get('DR_KINESIS_STREAM_NAME', '')\nconfig['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)\nconfig['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') \nconfig['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['KINESIS_VIDEO_STREAM_NAME']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['KINESIS_VIDEO_STREAM_NAME'] = os.environ.get('DR_KINESIS_STREAM_NAME', '')\nconfig['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)\nconfig['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') \nconfig['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')\nconfig['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['METRICS_S3_BUCKET']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['METRICS_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nmetrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)\nconfig['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') \nconfig['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')\nconfig['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')\nconfig['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "metrics_prefix",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "metrics_prefix = os.environ.get('DR_LOCAL_S3_METRICS_PREFIX', None)\nif metrics_prefix is not None:\n    config['METRICS_S3_OBJECT_KEY'] = '{}/TrainingMetrics.json'.format(metrics_prefix)\nelse:\n    config['METRICS_S3_OBJECT_KEY'] = 'DeepRacer-Metrics/TrainingMetrics-{}.json'.format(train_time)\nconfig['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') \nconfig['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')\nconfig['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')\nconfig['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)\nconfig['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['MODEL_METADATA_FILE_S3_KEY']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['MODEL_METADATA_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_MODEL_METADATA_KEY', 'custom_files/model_metadata.json') \nconfig['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')\nconfig['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')\nconfig['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)\nconfig['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training ",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['REWARD_FILE_S3_KEY']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['REWARD_FILE_S3_KEY'] = os.environ.get('DR_LOCAL_S3_REWARD_KEY', 'custom_files/reward_function.py')\nconfig['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')\nconfig['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)\nconfig['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['ROBOMAKER_SIMULATION_JOB_ACCOUNT_ID'] = os.environ.get('', 'Dummy')\nconfig['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)\nconfig['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['NUM_WORKERS']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['NUM_WORKERS'] = os.environ.get('DR_WORKERS', 1)\nconfig['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['SAGEMAKER_SHARED_S3_BUCKET']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['SAGEMAKER_SHARED_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['SAGEMAKER_SHARED_S3_PREFIX']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['SAGEMAKER_SHARED_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['SIMTRACE_S3_BUCKET']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['SIMTRACE_S3_BUCKET'] = os.environ.get('DR_LOCAL_S3_BUCKET', 'bucket')\nconfig['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['SIMTRACE_S3_PREFIX']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['SIMTRACE_S3_PREFIX'] = os.environ.get('DR_LOCAL_S3_MODEL_PREFIX', 'rl-deepracer-sagemaker')\nconfig['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['TRAINING_JOB_ARN']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['TRAINING_JOB_ARN'] = 'arn:Dummy'\n# Car and training \nconfig['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['BODY_SHELL_TYPE']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['BODY_SHELL_TYPE'] = os.environ.get('DR_CAR_BODY_SHELL_TYPE', 'deepracer')\nconfig['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['CAR_COLOR']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['CAR_COLOR'] = os.environ.get('DR_CAR_COLOR', 'Red')\nconfig['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['CAR_NAME']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['CAR_NAME'] = os.environ.get('DR_CAR_NAME', 'MyCar')\nconfig['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['RACE_TYPE']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['RACE_TYPE'] = os.environ.get('DR_RACE_TYPE', 'TIME_TRIAL')\nconfig['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['WORLD_NAME']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['WORLD_NAME'] = os.environ.get('DR_WORLD_NAME', 'LGSWide')\nconfig['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['DISPLAY_NAME']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['DISPLAY_NAME'] = os.environ.get('DR_DISPLAY_NAME', 'racer1')\nconfig['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['RACER_NAME']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['RACER_NAME'] = os.environ.get('DR_RACER_NAME', 'racer1')\nconfig['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['REVERSE_DIR']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['REVERSE_DIR'] = os.environ.get('DR_TRAIN_REVERSE_DIRECTION', False)\nconfig['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['ALTERNATE_DRIVING_DIRECTION']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['ALTERNATE_DRIVING_DIRECTION'] = os.environ.get('DR_TRAIN_ALTERNATE_DRIVING_DIRECTION', os.environ.get('DR_ALTERNATE_DRIVING_DIRECTION', 'false'))\nconfig['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['CHANGE_START_POSITION']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['CHANGE_START_POSITION'] = os.environ.get('DR_TRAIN_CHANGE_START_POSITION', os.environ.get('DR_CHANGE_START_POSITION', 'true'))\nconfig['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['ROUND_ROBIN_ADVANCE_DIST']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['ROUND_ROBIN_ADVANCE_DIST'] = os.environ.get('DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST', '0.05')\nconfig['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['START_POSITION_OFFSET']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['START_POSITION_OFFSET'] = os.environ.get('DR_TRAIN_START_POSITION_OFFSET', '0.00')\nconfig['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['ENABLE_DOMAIN_RANDOMIZATION']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['ENABLE_DOMAIN_RANDOMIZATION'] = os.environ.get('DR_ENABLE_DOMAIN_RANDOMIZATION', 'false')\nconfig['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')\n    config['RANDOMIZE_OBSTACLE_LOCATIONS'] = os.environ.get('DR_OA_RANDOMIZE_OBSTACLE_LOCATIONS', 'True')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['MIN_EVAL_TRIALS']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['MIN_EVAL_TRIALS'] = os.environ.get('DR_TRAIN_MIN_EVAL_TRIALS', '5')\nconfig['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')\n    config['RANDOMIZE_OBSTACLE_LOCATIONS'] = os.environ.get('DR_OA_RANDOMIZE_OBSTACLE_LOCATIONS', 'True')\n    config['IS_OBSTACLE_BOT_CAR'] = os.environ.get('DR_OA_IS_OBSTACLE_BOT_CAR', 'false')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['CAMERA_MAIN_ENABLE']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['CAMERA_MAIN_ENABLE'] = os.environ.get('DR_CAMERA_MAIN_ENABLE', 'True')\nconfig['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')\n    config['RANDOMIZE_OBSTACLE_LOCATIONS'] = os.environ.get('DR_OA_RANDOMIZE_OBSTACLE_LOCATIONS', 'True')\n    config['IS_OBSTACLE_BOT_CAR'] = os.environ.get('DR_OA_IS_OBSTACLE_BOT_CAR', 'false')\n    config['OBSTACLE_TYPE'] = os.environ.get('DR_OA_OBSTACLE_TYPE', 'box_obstacle')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['CAMERA_SUB_ENABLE']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['CAMERA_SUB_ENABLE'] = os.environ.get('DR_CAMERA_SUB_ENABLE', 'True')\nconfig['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')\n    config['RANDOMIZE_OBSTACLE_LOCATIONS'] = os.environ.get('DR_OA_RANDOMIZE_OBSTACLE_LOCATIONS', 'True')\n    config['IS_OBSTACLE_BOT_CAR'] = os.environ.get('DR_OA_IS_OBSTACLE_BOT_CAR', 'false')\n    config['OBSTACLE_TYPE'] = os.environ.get('DR_OA_OBSTACLE_TYPE', 'box_obstacle')\n    object_position_str = os.environ.get('DR_OA_OBJECT_POSITIONS', \"\")",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['BEST_MODEL_METRIC']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['BEST_MODEL_METRIC'] = os.environ.get('DR_TRAIN_BEST_MODEL_METRIC', 'progress')\n# Object Avoidance\nif config['RACE_TYPE'] == 'OBJECT_AVOIDANCE':\n    config['NUMBER_OF_OBSTACLES'] = os.environ.get('DR_OA_NUMBER_OF_OBSTACLES', '6')\n    config['MIN_DISTANCE_BETWEEN_OBSTACLES'] = os.environ.get('DR_OA_MIN_DISTANCE_BETWEEN_OBSTACLES', '2.0')\n    config['RANDOMIZE_OBSTACLE_LOCATIONS'] = os.environ.get('DR_OA_RANDOMIZE_OBSTACLE_LOCATIONS', 'True')\n    config['IS_OBSTACLE_BOT_CAR'] = os.environ.get('DR_OA_IS_OBSTACLE_BOT_CAR', 'false')\n    config['OBSTACLE_TYPE'] = os.environ.get('DR_OA_OBSTACLE_TYPE', 'box_obstacle')\n    object_position_str = os.environ.get('DR_OA_OBJECT_POSITIONS', \"\")\n    if object_position_str != \"\":",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_endpoint_url",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_endpoint_url = os.environ.get('DR_LOCAL_S3_ENDPOINT_URL', None)\ns3_region = config['AWS_REGION']\ns3_bucket = config['SAGEMAKER_SHARED_S3_BUCKET']\ns3_prefix = config['SAGEMAKER_SHARED_S3_PREFIX']\ns3_mode = os.environ.get('DR_LOCAL_S3_AUTH_MODE','profile')\nif s3_mode == 'profile':\n    s3_profile = os.environ.get('DR_LOCAL_S3_PROFILE', 'default')\nelse: # mode is 'role'\n    s3_profile = None\ns3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_region",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_region = config['AWS_REGION']\ns3_bucket = config['SAGEMAKER_SHARED_S3_BUCKET']\ns3_prefix = config['SAGEMAKER_SHARED_S3_PREFIX']\ns3_mode = os.environ.get('DR_LOCAL_S3_AUTH_MODE','profile')\nif s3_mode == 'profile':\n    s3_profile = os.environ.get('DR_LOCAL_S3_PROFILE', 'default')\nelse: # mode is 'role'\n    s3_profile = None\ns3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_bucket",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_bucket = config['SAGEMAKER_SHARED_S3_BUCKET']\ns3_prefix = config['SAGEMAKER_SHARED_S3_PREFIX']\ns3_mode = os.environ.get('DR_LOCAL_S3_AUTH_MODE','profile')\nif s3_mode == 'profile':\n    s3_profile = os.environ.get('DR_LOCAL_S3_PROFILE', 'default')\nelse: # mode is 'role'\n    s3_profile = None\ns3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nsession = boto3.session.Session(profile_name=s3_profile)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_prefix",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_prefix = config['SAGEMAKER_SHARED_S3_PREFIX']\ns3_mode = os.environ.get('DR_LOCAL_S3_AUTH_MODE','profile')\nif s3_mode == 'profile':\n    s3_profile = os.environ.get('DR_LOCAL_S3_PROFILE', 'default')\nelse: # mode is 'role'\n    s3_profile = None\ns3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nsession = boto3.session.Session(profile_name=s3_profile)\ns3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_mode",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_mode = os.environ.get('DR_LOCAL_S3_AUTH_MODE','profile')\nif s3_mode == 'profile':\n    s3_profile = os.environ.get('DR_LOCAL_S3_PROFILE', 'default')\nelse: # mode is 'role'\n    s3_profile = None\ns3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nsession = boto3.session.Session(profile_name=s3_profile)\ns3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_yaml_name",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_yaml_name = os.environ.get('DR_LOCAL_S3_TRAINING_PARAMS_FILE', 'training_params.yaml')\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nsession = boto3.session.Session(profile_name=s3_profile)\ns3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nlocal_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "yaml_key",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "yaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nsession = boto3.session.Session(profile_name=s3_profile)\ns3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nlocal_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "session = boto3.session.Session(profile_name=s3_profile)\ns3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nlocal_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {\n    'Bucket': s3_bucket,",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "s3_client",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "s3_client = session.client('s3', region_name=s3_region, endpoint_url=s3_endpoint_url)\nyaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nlocal_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {\n    'Bucket': s3_bucket,\n    'Key': config['REWARD_FILE_S3_KEY']",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "yaml_key",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "yaml_key = os.path.normpath(os.path.join(s3_prefix, s3_yaml_name))\nlocal_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {\n    'Bucket': s3_bucket,\n    'Key': config['REWARD_FILE_S3_KEY']\n}",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "local_yaml_path",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "local_yaml_path = os.path.abspath(os.path.join(os.environ.get('DR_DIR'),'tmp', 'training-params-' + train_time + '.yaml'))\nwith open(local_yaml_path, 'w') as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False, default_style='\\'', explicit_start=True)\n# Copy the reward function to the s3 prefix bucket for compatability with DeepRacer console.\nreward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {\n    'Bucket': s3_bucket,\n    'Key': config['REWARD_FILE_S3_KEY']\n}\ns3_client.copy(copy_source, Bucket=s3_bucket, Key=reward_function_key)",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "reward_function_key",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "reward_function_key = os.path.normpath(os.path.join(s3_prefix, \"reward_function.py\"))\ncopy_source = {\n    'Bucket': s3_bucket,\n    'Key': config['REWARD_FILE_S3_KEY']\n}\ns3_client.copy(copy_source, Bucket=s3_bucket, Key=reward_function_key)\n# Training with different configurations on each worker (aka Multi Config training)\nconfig['MULTI_CONFIG'] = os.environ.get('DR_TRAIN_MULTI_CONFIG', 'False')\nnum_workers = int(config['NUM_WORKERS'])\nif config['MULTI_CONFIG'] == \"True\" and num_workers > 1:",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "copy_source",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "copy_source = {\n    'Bucket': s3_bucket,\n    'Key': config['REWARD_FILE_S3_KEY']\n}\ns3_client.copy(copy_source, Bucket=s3_bucket, Key=reward_function_key)\n# Training with different configurations on each worker (aka Multi Config training)\nconfig['MULTI_CONFIG'] = os.environ.get('DR_TRAIN_MULTI_CONFIG', 'False')\nnum_workers = int(config['NUM_WORKERS'])\nif config['MULTI_CONFIG'] == \"True\" and num_workers > 1:\n    multi_config = {}",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "config['MULTI_CONFIG']",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "config['MULTI_CONFIG'] = os.environ.get('DR_TRAIN_MULTI_CONFIG', 'False')\nnum_workers = int(config['NUM_WORKERS'])\nif config['MULTI_CONFIG'] == \"True\" and num_workers > 1:\n    multi_config = {}\n    multi_config['multi_config'] = [None] * num_workers\n    for i in range(1,num_workers+1,1):\n        if i == 1:\n            # copy training_params to training_params_1\n            s3_yaml_name_list = s3_yaml_name.split('.')\n            s3_yaml_name_temp = s3_yaml_name_list[0] + \"_%d.yaml\" % i",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "num_workers",
        "kind": 5,
        "importPath": "config.scripts.prepare-config",
        "description": "config.scripts.prepare-config",
        "peekOfCode": "num_workers = int(config['NUM_WORKERS'])\nif config['MULTI_CONFIG'] == \"True\" and num_workers > 1:\n    multi_config = {}\n    multi_config['multi_config'] = [None] * num_workers\n    for i in range(1,num_workers+1,1):\n        if i == 1:\n            # copy training_params to training_params_1\n            s3_yaml_name_list = s3_yaml_name.split('.')\n            s3_yaml_name_temp = s3_yaml_name_list[0] + \"_%d.yaml\" % i\n            #minio additional training params files",
        "detail": "config.scripts.prepare-config",
        "documentation": {}
    },
    {
        "label": "graph_attr",
        "kind": 5,
        "importPath": "docs.architecture-general",
        "description": "docs.architecture-general",
        "peekOfCode": "graph_attr = {\n    \"fontsize\": \"20\",\n    \"bgcolor\": \"transparent\"\n}\nwith Diagram(\"Architecture Diagram\", outformat=\"pdf\", graph_attr=graph_attr):\n    user = User()\n    with Cluster(\"On Premise Server\"):\n        with Cluster(\"Jupyter Environment\"):\n            jupyter_notebook = Custom(\"Jupyter Notebook\", \"./assets/jupyter-logo.png\")\n            libs = Python(\"Built modules\")",
        "detail": "docs.architecture-general",
        "documentation": {}
    },
    {
        "label": "reward_function",
        "kind": 2,
        "importPath": "notebooks.reward_function",
        "description": "notebooks.reward_function",
        "peekOfCode": "def reward_function(params):\n    reward = 2\n    return float(reward)",
        "detail": "notebooks.reward_function",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "peekOfCode": "def create_folder(folder_name: str, mode: int = None):\n    try:\n        if not os.path.exists(folder_name):\n            os.makedirs(folder_name) if mode is None else os.makedirs(folder_name, mode=mode)\n    except PermissionError:\n        raise PermissionError(f'You don\\'t have permission to create folder {folder_name} with permission {mode}')\n    except Exception as e:\n        raise e\ndef delete_files_on_folder(folder_name: str):\n    try:",
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "delete_files_on_folder",
        "kind": 2,
        "importPath": "pipelines.helpers.files_manager",
        "description": "pipelines.helpers.files_manager",
        "peekOfCode": "def delete_files_on_folder(folder_name: str):\n    try:\n        if os.path.exists(folder_name):\n            files = glob(f'{folder_name}/*')\n            [os.remove(file) for file in files]\n    except PermissionError:\n        raise PermissionError(f'You don\\'t have permission to delete folder {folder_name}')\n    except Exception as e:\n        raise e",
        "detail": "pipelines.helpers.files_manager",
        "documentation": {}
    },
    {
        "label": "BaseExceptionTransformers",
        "kind": 6,
        "importPath": "pipelines.transformers.exceptions.base",
        "description": "pipelines.transformers.exceptions.base",
        "peekOfCode": "class BaseExceptionTransformers(Exception):\n    def __init__(self, msg: str = None, exception: Exception = None):\n        self.exception = exception\n        self.msg = msg\n    def __str__(self):\n        return f'{self.msg}, {self.exception}'",
        "detail": "pipelines.transformers.exceptions.base",
        "documentation": {}
    },
    {
        "label": "image_tag_has_running_container",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def image_tag_has_running_container(_, docker_client: DockerClient, image_tag: str) -> bool:\n    is_running = check_if_image_has_container_running(docker_client, image_tag)\n    return is_running\n@partial_transformer\ndef images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer\ndef images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "images_tags_has_some_running_container",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer\ndef images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return all(is_running_containers)\n@partial_transformer\ndef echo(_, message: str):\n    print(message)",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "images_tags_has_running_container",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def images_tags_has_running_container(_, docker_client: DockerClient, image_tags: List[str]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return all(is_running_containers)\n@partial_transformer\ndef echo(_, message: str):\n    print(message)\n@condition\ndef forward_condition(_condition: bool):\n    return _condition\n@partial_transformer",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "echo",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def echo(_, message: str):\n    print(message)\n@condition\ndef forward_condition(_condition: bool):\n    return _condition\n@partial_transformer\ndef up_compose_files(_, files_path: List[DockerImages]):\n    docker_compose.up(files_path)",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "forward_condition",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def forward_condition(_condition: bool):\n    return _condition\n@partial_transformer\ndef up_compose_files(_, files_path: List[DockerImages]):\n    docker_compose.up(files_path)",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "up_compose_files",
        "kind": 2,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "def up_compose_files(_, files_path: List[DockerImages]):\n    docker_compose.up(files_path)",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "ImageTag",
        "kind": 5,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "ImageTag = str\ndocker_compose = DockerComposeCommands()\n@partial_transformer\ndef image_tag_has_running_container(_, docker_client: DockerClient, image_tag: str) -> bool:\n    is_running = check_if_image_has_container_running(docker_client, image_tag)\n    return is_running\n@partial_transformer\ndef images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "docker_compose",
        "kind": 5,
        "importPath": "pipelines.transformers.general",
        "description": "pipelines.transformers.general",
        "peekOfCode": "docker_compose = DockerComposeCommands()\n@partial_transformer\ndef image_tag_has_running_container(_, docker_client: DockerClient, image_tag: str) -> bool:\n    is_running = check_if_image_has_container_running(docker_client, image_tag)\n    return is_running\n@partial_transformer\ndef images_tags_has_some_running_container(_, docker_client: DockerClient, image_tags: List[str | None]):\n    is_running_containers = [check_if_image_has_container_running(docker_client, image_tag) for image_tag in image_tags]\n    return any(is_running_containers)\n@partial_transformer",
        "detail": "pipelines.transformers.general",
        "documentation": {}
    },
    {
        "label": "side_effect",
        "kind": 2,
        "importPath": "pipelines.transformers.helpers",
        "description": "pipelines.transformers.helpers",
        "peekOfCode": "def side_effect(_transformer: Transformer[_In, Any]) -> Transformer[_In, _In]:\n    \"\"\"\n    This transformer just executes another one but does not pass\n     anything to the next transformer on pipeline execution\n    \"\"\"\n    @transformer\n    def _pick_income(income: tuple[Any, _In]) -> _In:\n        return income[1]\n    return forward_incoming(_transformer) >> _pick_income",
        "detail": "pipelines.transformers.helpers",
        "documentation": {}
    },
    {
        "label": "_In",
        "kind": 5,
        "importPath": "pipelines.transformers.helpers",
        "description": "pipelines.transformers.helpers",
        "peekOfCode": "_In = TypeVar('_In')\n# side_effect\ndef side_effect(_transformer: Transformer[_In, Any]) -> Transformer[_In, _In]:\n    \"\"\"\n    This transformer just executes another one but does not pass\n     anything to the next transformer on pipeline execution\n    \"\"\"\n    @transformer\n    def _pick_income(income: tuple[Any, _In]) -> _In:\n        return income[1]",
        "detail": "pipelines.transformers.helpers",
        "documentation": {}
    },
    {
        "label": "create_sagemaker_temp_files",
        "kind": 2,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "def create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)\n@transformer\ndef check_if_metadata_is_available(_) -> None:\n    try:",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "check_if_metadata_is_available",
        "kind": 2,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "def check_if_metadata_is_available(_) -> None:\n    try:\n        create_folder(work_directory)\n        delete_files_on_folder(work_directory)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to check if the metadata is available\", e)\n@partial_transformer\ndef upload_hyperparameters(_, minio_client: MinioClient, hyperparameters: HyperParameters):",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "kind": 2,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "def upload_hyperparameters(_, minio_client: MinioClient, hyperparameters: HyperParameters):\n    try:\n        _upload_hyperparameters(minio_client, hyperparameters)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the hyperparameters\", e)\n@partial_transformer\ndef upload_metadata(_, minio_client: MinioClient, model_metadata: ModelMetadata):\n    try:",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "kind": 2,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "def upload_metadata(_, minio_client: MinioClient, model_metadata: ModelMetadata):\n    try:\n        _upload_metadata(minio_client, model_metadata)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the model metadata\", e)\n@partial_transformer\ndef upload_reward_function(_, minio_client: MinioClient, reward_function_buffer: BytesIO):\n    try:",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "kind": 2,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "def upload_reward_function(_, minio_client: MinioClient, reward_function_buffer: BytesIO):\n    try:\n        _upload_reward_function(minio_client, reward_function_buffer)\n    except MinioException as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to upload the reward function\", e)",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "sagemaker_temp_dir",
        "kind": 5,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "sagemaker_temp_dir = '/tmp/sagemaker'\nwork_directory = '/tmp/teste'\n@transformer\ndef create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "work_directory",
        "kind": 5,
        "importPath": "pipelines.transformers.training",
        "description": "pipelines.transformers.training",
        "peekOfCode": "work_directory = '/tmp/teste'\n@transformer\ndef create_sagemaker_temp_files(_) -> None:\n    try:\n        create_folder(sagemaker_temp_dir, 0o770)\n    except PermissionError as e:\n        raise BaseExceptionTransformers(exception=e)\n    except Exception as e:\n        raise BaseExceptionTransformers(\"It was not possible to create the sagemaker's temp folder\", e)\n@transformer",
        "detail": "pipelines.transformers.training",
        "documentation": {}
    },
    {
        "label": "DockerImages",
        "kind": 6,
        "importPath": "pipelines.types_built.docker",
        "description": "pipelines.types_built.docker",
        "peekOfCode": "class DockerImages(str, Enum):\n    training = 'training'",
        "detail": "pipelines.types_built.docker",
        "documentation": {}
    },
    {
        "label": "ExplorationType",
        "kind": 6,
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "peekOfCode": "class ExplorationType(Enum):\n    \"\"\"\n    Exploration strategies used in training algorithms.\n    - `CATEGORICAL`: Used for clipped_ppo training algorithm.\n    - `ADDITIVE_NOISE`: Used for sac training algorithm.\n    \"\"\"\n    CATEGORICAL = 'categorical'\n    ADDITIVE_NOISE = 'additive_noise'\nclass LossType(Enum):\n    \"\"\"",
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "LossType",
        "kind": 6,
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "peekOfCode": "class LossType(Enum):\n    \"\"\"\n    Types of loss techniques used to minimize error.\n    - `MSE`: Mean Squared Error loss.\n    - `HUBER`: Huber loss.\n    \"\"\"\n    MSE = 'mean squared error'\n    HUBER = 'huber'\n@dataclass\nclass HyperParameters:",
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "HyperParameters",
        "kind": 6,
        "importPath": "pipelines.types_built.hyperparameters",
        "description": "pipelines.types_built.hyperparameters",
        "peekOfCode": "class HyperParameters:\n    \"\"\"\n    Hyperparameters structure for DeepRacer with default values from documentation.\n    Attributes:\n    - `batch_size`: Batch size used in training (default: 64).\n    - `beta_entropy`: Beta value for entropy regularization (default: 0.01).\n    - `discount_factor`: Discount factor for future rewards (default: 0.999).\n    - `e_greedy_value`: Epsilon greedy value for exploration (default: 0.05).\n    - `epsilon_steps`: Number of steps for epsilon decay (default: 10000).\n    - `exploration_type`: Type of exploration strategy (default: `CATEGORICAL`).",
        "detail": "pipelines.types_built.hyperparameters",
        "documentation": {}
    },
    {
        "label": "ActionSpaceType",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class ActionSpaceType(Enum):\n    \"\"\"Type of action space that will be used by the model.\n    - `CONTINUOUS`: Represents continuous values on the action space, which are specified by a range.\n    - `DISCRETE`: Represents discrete values on the action space, which represent specific points.\n    \"\"\"\n    CONTINUOUS = 'continuous'\n    DISCRETE = 'discrete'\nclass NeuralNetwork(Enum):\n    \"\"\"Type of Neural Network used for training the algorithm.\n    - `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`: This network has no fully connected layer; the input embedder nodes",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "NeuralNetwork",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class NeuralNetwork(Enum):\n    \"\"\"Type of Neural Network used for training the algorithm.\n    - `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`: This network has no fully connected layer; the input embedder nodes\n      connect directly to the action nodes.\n    - `DEEP_CONVOLUTIONAL_NETWORK`: This network includes a single fully connected layer of 64 nodes.\n    - `DEEP_CONVOLUTIONAL_NETWORK_DEEP`: This network includes two fully connected layers of 512 nodes each.\n    \"\"\"\n    DEEP_CONVOLUTIONAL_NETWORK_SHALLOW = 'DEEP_CONVOLUTIONAL_NETWORK_SHALLOW'\n    DEEP_CONVOLUTIONAL_NETWORK = 'DEEP_CONVOLUTIONAL_NETWORK'\n    DEEP_CONVOLUTIONAL_NETWORK_DEEP = 'DEEP_CONVOLUTIONAL_NETWORK_DEEP'",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "TrainingAlgorithm",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class TrainingAlgorithm(Enum):\n    \"\"\"Training algorithms for the model.\n    - `SAC`: Stochastic Actor-Critic.\n    - `PPO`: Proximal Policy Optimization.\n    \"\"\"\n    SAC = 'sac'\n    PPO = 'ppo'\nclass Sensor(Enum):\n    \"\"\"Types of sensors used in the model.\n    - `FRONT_FACING_CAMERA`: Front-facing camera sensor.",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "Sensor",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class Sensor(Enum):\n    \"\"\"Types of sensors used in the model.\n    - `FRONT_FACING_CAMERA`: Front-facing camera sensor.\n    - `STEREO_CAMERAS`: Stereo camera sensors.\n    - `LIDAR`: Light Detection and Ranging sensor.\n    \"\"\"\n    FRONT_FACING_CAMERA = 'FRONT_FACING_CAMERA'\n    STEREO_CAMERAS = 'STEREO_CAMERAS'\n    LIDAR = 'LIDAR'\n@dataclass",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "SteeringAngle",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class SteeringAngle:\n    \"\"\"Represents the range of steering angles.\"\"\"\n    high: float\n    low: float\n@dataclass\nclass Speed:\n    \"\"\"Represents the range of speeds.\"\"\"\n    high: float\n    low: float\n@dataclass",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "Speed",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class Speed:\n    \"\"\"Represents the range of speeds.\"\"\"\n    high: float\n    low: float\n@dataclass\nclass ContinuousActionSpace:\n    \"\"\"Defines the continuous action space.\n    Attributes:\n    - `steering_angle`: Range of steering angles.\n    - `speed`: Range of speeds.",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ContinuousActionSpace",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class ContinuousActionSpace:\n    \"\"\"Defines the continuous action space.\n    Attributes:\n    - `steering_angle`: Range of steering angles.\n    - `speed`: Range of speeds.\n    \"\"\"\n    steering_angle: SteeringAngle\n    speed: Speed\nclass DiscreteActionSpace(Enum):\n    \"\"\"Defines the discrete action space.\"\"\"",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "DiscreteActionSpace",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class DiscreteActionSpace(Enum):\n    \"\"\"Defines the discrete action space.\"\"\"\n    steering_angle = -30.0\n    speed = 0.6\n@dataclass\nclass ModelMetadata:\n    \"\"\"Metadata for the model.\n    Attributes:\n    - `action_space_type`: Type of action space used by the model (default: `CONTINUOUS`).\n    - `action_space`: Action space configuration (default: continuous action space).",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "ModelMetadata",
        "kind": 6,
        "importPath": "pipelines.types_built.model_metadata",
        "description": "pipelines.types_built.model_metadata",
        "peekOfCode": "class ModelMetadata:\n    \"\"\"Metadata for the model.\n    Attributes:\n    - `action_space_type`: Type of action space used by the model (default: `CONTINUOUS`).\n    - `action_space`: Action space configuration (default: continuous action space).\n    - `version`: Version of the model (default: 5).\n    - `training_algorithm`: Training algorithm used (default: `PPO`).\n    - `neural_network`: Type of neural network used for training (default: `DEEP_CONVOLUTIONAL_NETWORK_SHALLOW`).\n    - `sensor`: List of sensors used by the model (default: `[FRONT_FACING_CAMERA]`).\n    \"\"\"",
        "detail": "pipelines.types_built.model_metadata",
        "documentation": {}
    },
    {
        "label": "DockerComposeCommands",
        "kind": 6,
        "importPath": "pipelines.utils.commands.docker_compose",
        "description": "pipelines.utils.commands.docker_compose",
        "peekOfCode": "class DockerComposeCommands:\n    \"\"\"\n    A class to manage Docker Compose commands.\n    Attributes:\n        _base_command (str): The base command for Docker Compose operations.\n    Methods:\n        __init__(): Initializes the DockerComposeCommands object with the base Docker Compose command.\n        up(files_path: List[DockerImages]): Executes the 'docker-compose up' command with specified files.\n        down(files_path: List[DockerImages]): Executes the 'docker-compose down' command.\n    \"\"\"",
        "detail": "pipelines.utils.commands.docker_compose",
        "documentation": {}
    },
    {
        "label": "DockerClientServer",
        "kind": 6,
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "peekOfCode": "class DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = APIClient(base_url, use_ssh_client=True)\n            return cls._instance",
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "local_docker_daemon",
        "kind": 5,
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "peekOfCode": "local_docker_daemon = os.getenv('LOCAL_SERVER_DOCKER_DAEMON')\nremote_docker_daemon = os.getenv(\"REMOTE_SERVER_DOCKER_DAEMON\")\nbase_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:",
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "remote_docker_daemon",
        "kind": 5,
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "peekOfCode": "remote_docker_daemon = os.getenv(\"REMOTE_SERVER_DOCKER_DAEMON\")\nbase_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:",
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "pipelines.utils.docker.server",
        "description": "pipelines.utils.docker.server",
        "peekOfCode": "base_url = remote_docker_daemon if remote_docker_daemon is not None else local_docker_daemon\nclass DockerClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = APIClient(base_url, use_ssh_client=True)",
        "detail": "pipelines.utils.docker.server",
        "documentation": {}
    },
    {
        "label": "check_if_image_has_container_running",
        "kind": 2,
        "importPath": "pipelines.utils.docker.utilities",
        "description": "pipelines.utils.docker.utilities",
        "peekOfCode": "def check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True\n    return False\ndef _find_image_id_by_name(docker_client: DockerClient, image_tag: str) -> str:",
        "detail": "pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "ImageId",
        "kind": 5,
        "importPath": "pipelines.utils.docker.utilities",
        "description": "pipelines.utils.docker.utilities",
        "peekOfCode": "ImageId = str\nImageName = str\ndef check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True",
        "detail": "pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "ImageName",
        "kind": 5,
        "importPath": "pipelines.utils.docker.utilities",
        "description": "pipelines.utils.docker.utilities",
        "peekOfCode": "ImageName = str\ndef check_if_image_has_container_running(docker_client: DockerClient, image_tag: str) -> bool:\n    containers = docker_client.containers(filters={\"status\": \"running\"})\n    image_id = _find_image_id_by_name(docker_client, image_tag)\n    container_id = [container[\"ImageID\"] for container in containers if container[\"ImageID\"] == image_id]\n    if len(container_id) == 0:\n        return False\n    if container_id[0] == image_id:\n        return True\n    return False",
        "detail": "pipelines.utils.docker.utilities",
        "documentation": {}
    },
    {
        "label": "FileUploadException",
        "kind": 6,
        "importPath": "pipelines.utils.minio.exceptions.file_upload_exception",
        "description": "pipelines.utils.minio.exceptions.file_upload_exception",
        "peekOfCode": "class FileUploadException(Exception):\n    \"\"\"Exception raised for errors related to files uploads.\"\"\"\n    def __init__(self, message=\"Error uploading file.\", original_exception=None):\n        \"\"\"\n        Initialize a FileException.\n        Args:\n            message (str): Explanation of the error.\n            original_exception (Exception): The original exception that caused this exception.\n        \"\"\"\n        self.message = message",
        "detail": "pipelines.utils.minio.exceptions.file_upload_exception",
        "documentation": {}
    },
    {
        "label": "MinioClientServer",
        "kind": 6,
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "peekOfCode": "class MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = MinioClient(endpoint, access_key, secret_key, secure=False)\n            return cls._instance",
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "access_key",
        "kind": 5,
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "peekOfCode": "access_key = os.getenv('ACCESS_KEY')\nsecret_key = os.getenv('SECRET_KEY')\nendpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:",
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "secret_key",
        "kind": 5,
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "peekOfCode": "secret_key = os.getenv('SECRET_KEY')\nendpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:",
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 5,
        "importPath": "pipelines.utils.minio.server",
        "description": "pipelines.utils.minio.server",
        "peekOfCode": "endpoint = os.getenv('MINIO_SERVER_URL')\nclass MinioClientServer:\n    _instance = None\n    def __init__(self):\n        raise RuntimeError(\"This is a Singleton class, invoke the get_instance() method instead\")\n    @classmethod\n    def get_instance(cls):\n        try:\n            if cls._instance is None:\n                cls._instance = MinioClient(endpoint, access_key, secret_key, secure=False)",
        "detail": "pipelines.utils.minio.server",
        "documentation": {}
    },
    {
        "label": "upload_hyperparameters",
        "kind": 2,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        hyperparameters (HyperParameters): The hyperparameters to minio.\n    Returns:",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_reward_function",
        "kind": 2,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_reward_function(\n    minio_client: MinioClient,\n    reward_function_buffer: io.BytesIO\n):\n    try:\n        buffer_size = reward_function_buffer.getbuffer().nbytes\n        object_name = 'reward_function.py'\n        result = minio_client.put_object(\n            _bucket_name,\n            f'{_custom_files_folder}/{object_name}',",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "upload_metadata",
        "kind": 2,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "def upload_metadata(\n    minio_client: MinioClient,\n    model_metadata: ModelMetadata\n):\n    \"\"\"\n    Uploads metadata to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        model_metadata (Model Metadata): The metadata to minio.\n    Returns:",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_bucket_name",
        "kind": 5,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "_bucket_name = os.getenv('BUCKET_NAME')\n_custom_files_folder = os.getenv('CUSTOM_FILES_FOLDER_PATH')\n_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_custom_files_folder",
        "kind": 5,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "_custom_files_folder = os.getenv('CUSTOM_FILES_FOLDER_PATH')\n_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "_reward_function_path",
        "kind": 5,
        "importPath": "pipelines.utils.minio.utilities",
        "description": "pipelines.utils.minio.utilities",
        "peekOfCode": "_reward_function_path = os.getenv('REWARD_FUNCTION_PATH')\ndef upload_hyperparameters(\n    minio_client: MinioClient,\n    hyperparameters: HyperParameters\n):\n    \"\"\"\n    Uploads hyperparameters to an S3 bucket.\n    Args:\n        minio_client (MinioClient): The client of the minio api\n        hyperparameters (HyperParameters): The hyperparameters to minio.",
        "detail": "pipelines.utils.minio.utilities",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pipelines.main",
        "description": "pipelines.main",
        "peekOfCode": "x = up_compose_files([\"as\"])\nx(None)",
        "detail": "pipelines.main",
        "documentation": {}
    },
    {
        "label": "train_pipeline",
        "kind": 2,
        "importPath": "pipelines.training_pipeline",
        "description": "pipelines.training_pipeline",
        "peekOfCode": "def train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(\n            forward[None]() >> (\n                (",
        "detail": "pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "_docker_client",
        "kind": 5,
        "importPath": "pipelines.training_pipeline",
        "description": "pipelines.training_pipeline",
        "peekOfCode": "_docker_client = DockerClientServer.get_instance()\n_minio_client = MinioClientServer.get_instance()\nsagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition",
        "detail": "pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "_minio_client",
        "kind": 5,
        "importPath": "pipelines.training_pipeline",
        "description": "pipelines.training_pipeline",
        "peekOfCode": "_minio_client = MinioClientServer.get_instance()\nsagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))",
        "detail": "pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "sagemaker_tag",
        "kind": 5,
        "importPath": "pipelines.training_pipeline",
        "description": "pipelines.training_pipeline",
        "peekOfCode": "sagemaker_tag = os.getenv('SAGEMAKER_IMAGE_REPOTAG')\nrobomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(",
        "detail": "pipelines.training_pipeline",
        "documentation": {}
    },
    {
        "label": "robomaker_tag",
        "kind": 5,
        "importPath": "pipelines.training_pipeline",
        "description": "pipelines.training_pipeline",
        "peekOfCode": "robomaker_tag = os.getenv('ROBOMAKER_IMAGE_REPOTAG')\ndef train_pipeline(hyperparameters: HyperParameters, model_metadata: ModelMetadata, reward_function_buffer: BytesIO):\n    training_start_pipeline = (\n        create_sagemaker_temp_files >>\n        check_if_metadata_is_available >>\n        images_tags_has_some_running_container(_docker_client, [sagemaker_tag, robomaker_tag]) >>\n        forward_condition\n        .Then(echo(\"The training is running, please stop the train before starting a new one.\"))\n        .Else(\n            forward[None]() >> (",
        "detail": "pipelines.training_pipeline",
        "documentation": {}
    }
]